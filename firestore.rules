/**
 * @fileoverview Firestore Security Rules for the handball club app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, penalties, and transactions,
 * ensuring that only the authenticated user (or an admin, if implemented) can access their data.
 * Audit logs are restricted to admin access only.  Rules are designed so that rules are not filters.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where {userId} corresponds to the Firebase Auth UID.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions associated with a specific user.
 * - /audit_logs/{auditLogId}: Stores audit logs, accessible only by admins.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the ownership model and lack of a global "users" collection.
 * - Authorization is determined by matching `request.auth.uid` against the `userId` path parameter.
 * - The rules explicitly deny unauthorized access attempts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Unauthenticated user cannot access any profile.
     * @deny (get, update, delete) Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow reads if the user is signed in and is the owner.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow updates if the user is signed in, is the owner, and the document exists. Prevents changing the id (ownership).
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletes if the user is signed in, is the owner, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to penalty documents within a user's subcollection.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (create) Authenticated user can create a penalty for themselves.
     * @allow (get, list, update, delete) Authenticated user can access their own penalties.
     * @deny (create) Unauthenticated user cannot create a penalty.
     * @deny (get, list, update, delete) Unauthenticated user cannot access any penalties.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's penalties.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow creation if the user is signed in and is the owner of the parent user document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow reads if the user is signed in and is the owner of the parent user document.
      allow get: if isSignedIn() && isOwner(userId);

      //The error reported by NextJS was on this line. Adding it here now.
      allow list: if isSignedIn() && isOwner(userId);

      // Allow updates if the user is signed in, is the owner of the parent user document, and the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow deletes if the user is signed in, is the owner of the parent user document, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user can create a transaction for themselves.
     * @allow (get, list, update, delete) Authenticated user can access their own transactions.
     * @deny (create) Unauthenticated user cannot create a transaction.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's transactions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow creation if the user is signed in and is the owner.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow reads if the user is signed in and is the owner.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow list if the user is signed in and is the owner.
      allow list: if isSignedIn() && isOwner(userId);

      // Allow updates if the user is signed in, is the owner, and the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow deletes if the user is signed in, is the owner, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to audit log documents.
     * @path /audit_logs/{auditLogId}
     * @allow None (Admin access only - placeholder).
     * @deny All access for non-admins.
     * @principle Restricts all access to admin users (not implemented in this example).
     */
    match /audit_logs/{auditLogId} {
      //TODO: Implement Admin role check
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}