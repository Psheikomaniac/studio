/**
 * @file Firebase Security Rules for the handball club app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, penalties, and transactions.
 * Access to audit logs is restricted to administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions associated with a specific user.
 * - /audit_logs/{auditLogId}: Stores audit log entries.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, penalties, and transactions.
 * - Listing of users is not allowed.
 * - Audit logs are only accessible to administrators (admin role not yet implemented, so all access denied).
 *
 * Denormalization for Authorization:
 * - Penalties and transactions are nested under the user's document to ensure that accessing them doesn't
 *   require fetching the user document to validate ownership. The userId in the path is sufficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create, update, delete, get) if the user's UID matches the userId in the path.
     * @deny (create, update, delete, get) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own penalties.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (create, update, delete, get, list) if the user's UID matches the userId in the path.
     * @deny (create, update, delete, get, list) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, update, delete, get, list) if the user's UID matches the userId in the path.
     * @deny (create, update, delete, get, list) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Restricts access to audit logs to administrators. (Admin role not yet implemented).
     * @path /audit_logs/{auditLogId}
     * @allow No operations are allowed at the moment.
     * @deny All operations are denied.
     * @principle Restricts access to sensitive data to authorized personnel only.
     */
    match /audit_logs/{auditLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}