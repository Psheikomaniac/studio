/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles, penalties, and transactions, and restricts access to audit logs to admins only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user with the matching UID.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a specific user, accessible only to that user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions for a specific user, accessible only to that user.
 * - /audit_logs/{auditLogId}: Stores audit logs, accessible only to admins.
 *
 * Key Security Decisions:
 * - Listing of the /users collection is denied.
 * - All write operations require authentication.
 * - Schema validation is relaxed for rapid prototyping, focusing only on ownership and relational integrity.
 * - Audit logs are restricted to admins (currently placeholder logic).
 *
 * Denormalization for Authorization:
 * - The userId is present in the path for penalties and transactions, which is used to validate ownership without needing additional reads.
 *
 * Structural Segregation:
 * - User-owned data (penalties, transactions) is stored in subcollections, ensuring that list operations are secure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to the /users collection to the owner only.
     * @path /users/{userId}
     * @allow (get) User with UID "userId" can read their own profile.
     * @allow (create) User with UID "userId" can create their profile if request.auth.uid == userId.
     * @deny (get) User with UID "otherUserId" cannot read user profile with userId.
     * @deny (create) User with UID "otherUserId" cannot create user profile with userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows anyone to read a user's document
      allow get: if isOwner(userId);

      // Restrict listing users
      allow list: if false;

      // Allows a user to create their own document, enforcing that the userId matches their auth UID
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allows a user to update their own document
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allows a user to delete their own document
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to penalties to the owner only.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (get) User with UID "userId" can read their own penalty.
     * @allow (create) User with UID "userId" can create a penalty under their user document.
     * @deny (get) User with UID "otherUserId" cannot read penalty under user profile with userId.
     * @deny (create) User with UID "otherUserId" cannot create penalty under user profile with userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/penalties/{penaltyId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows anyone to read a penalty if they are the owner
      allow get: if isOwner(userId);

      // Allows the owner to list their penalties
      allow list: if isOwner(userId);

      // Allows a user to create a penalty under their user document, enforcing userId consistency.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allows a user to update their penalty, ensuring userId consistency
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allows a user to delete their penalty
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to transactions to the owner only.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get) User with UID "userId" can read their own transaction.
     * @allow (create) User with UID "userId" can create a transaction under their user document.
     * @deny (get) User with UID "otherUserId" cannot read transaction under user profile with userId.
     * @deny (create) User with UID "otherUserId" cannot create transaction under user profile with userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows anyone to read a transaction if they are the owner
      allow get: if isOwner(userId);

      // Allows the owner to list their transactions
      allow list: if isOwner(userId);

      // Allows a user to create a transaction under their user document, enforcing userId consistency.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allows a user to update their transaction, ensuring userId consistency
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allows a user to delete their transaction
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to audit logs to admins only.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Admin user can read audit logs.
     * @allow (create) Admin user can create audit logs.
     * @deny (get) Non-admin user cannot read audit logs.
     * @deny (create) Non-admin user cannot create audit logs.
     */
    match /audit_logs/{auditLogId} {
      // Placeholder for admin check.  Replace with your actual admin check logic.
      function isAdmin() {
        return false; // TODO: Implement admin role check.
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}