/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles, penalties, and transactions.
 *   Audit logs are restricted to admin access only. Data structure follows a hierarchical organization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions associated with a user.
 * - /audit_logs/{auditLogId}: Stores audit logs.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, penalties, and transactions.
 * - Audit logs are restricted to admin access only.
 * - Listing all users is not permitted.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Penalties and transactions are nested under the user's document to avoid needing to fetch the user document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data based on ownership.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to penalties associated with a specific user.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to transactions associated with a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to audit logs to admins only.
     * @path /audit_logs/{auditLogId}
     * @allow (get, create, update, delete) if the user is an admin (currently always false, replace with admin check).
     * @deny (get, create, update, delete) if the user is not an admin.
     * @principle Restricts access to sensitive data to authorized personnel.
     */
    match /audit_logs/{auditLogId} {
      allow get: if false; // TODO: Implement admin role check
      allow list: if false; // TODO: Implement admin role check
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }
  }
}