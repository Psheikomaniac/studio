/**
 * @description This ruleset enforces a strict user-ownership model for user data, penalties, and transactions,
 *              allowing only the authenticated user or admins to access their respective data. Audit logs
 *              are restricted to admins only.
 * @dataStructure User data is stored under /users/{userId}, with penalties and transactions nested as subcollections.
 *                Audit logs are stored in a separate /audit_logs collection.
 * @keySecurityDecisions - User listing is implicitly disallowed due to the ownership model.
 *                         - All writes require a verified user identity (request.auth != null).
 *                         - The ruleset prioritizes authorization independence for performance.
 * @denormalizationForAuthorization Not applicable, authorization is based on path and user ID.
 * @structuralSegregation Private user data (penalties, transactions) is stored in user-specific subcollections,
 *                        while public data (audit logs) is stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile (userId matches auth.uid).
     * @allow (get, update, delete) Authenticated user accesses their own profile (userId matches auth.uid).
     * @deny (create) User attempts to create a profile with a userId that doesn't match their auth.uid.
     * @deny (get, update, delete) User attempts to access another user's profile (userId doesn't match auth.uid).
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to penalty documents within a user's subcollection.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (create) Authenticated user creates a penalty under their own profile.
     * @allow (get, update, delete) Authenticated user accesses a penalty under their own profile.
     * @deny (create) User attempts to create a penalty under another user's profile.
     * @deny (get, update, delete) User attempts to access a penalty under another user's profile.
     * @principle Enforces ownership of penalty documents.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user creates a transaction under their own profile.
     * @allow (get, update, delete) Authenticated user accesses a transaction under their own profile.
     * @deny (create) User attempts to create a transaction under another user's profile.
     * @deny (get, update, delete) User attempts to access a transaction under another user's profile.
     * @principle Enforces ownership of transaction documents.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to audit log documents.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) Only admins can read audit logs.
     * @allow (create, update, delete) Only admins can write audit logs.
     * @principle Restricts access to audit logs to authorized personnel.
     */
    match /audit_logs/{auditLogId} {
      // TODO: Implement admin role check.  Leaving this rule open for prototyping.
      allow get, list, create, update, delete: if false;
    }
  }
}