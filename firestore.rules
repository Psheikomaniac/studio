/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data, penalties, and transactions.
 * Audit logs are restricted to admin access only. Data validation is relaxed for prototyping.
 *
 * @data-structure
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions associated with a user.
 * - /audit_logs/{auditLogId}: Stores audit logs.
 *
 * @key-security-decisions
 * - Users can only access their own user document and associated penalties/transactions.
 * - Listing of all users is disallowed.
 * - Audit logs are only accessible to admins. (Not yet implemented)
 * - Data validation is minimal during the prototyping phase. Only validate fields that are critical for authorization and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own user document if the userId matches their auth UID.
     * @deny (create) - Unauthenticated user cannot create a user document.
     * @deny (get, update, delete) - Authenticated user cannot access another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to penalty documents within a user's subcollection.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (create) - Authenticated user can create a penalty document within their own user document. The userId path parameter corresponds to the Firebase Auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete a penalty document within their own user document. The userId path parameter corresponds to the Firebase Auth UID.
     * @deny (create) - Unauthenticated user cannot create a penalty document.
     * @deny (get, update, delete) - Authenticated user cannot access another user's penalty document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user can create a transaction document within their own user document. The userId path parameter corresponds to the Firebase Auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete a transaction document within their own user document. The userId path parameter corresponds to the Firebase Auth UID.
     * @deny (create) - Unauthenticated user cannot create a transaction document.
     * @deny (get, update, delete) - Authenticated user cannot access another user's transaction document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to audit log documents.  Only admins should have access.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) - Only admins can read audit logs.  (Not yet implemented.)
     * @allow (create, update, delete) - Only admins can create, update, or delete audit logs. (Not yet implemented.)
     * @deny All access is denied to non-admin users.
     * @principle Restricts access to admin users.
     */
    match /audit_logs/{auditLogId} {
      // TODO: Implement admin role check
      allow get: if false; 
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Deny all access to the predefinedFines collection.
     * @path /predefinedFines
     * @deny (get, list, create, update, delete) - No one can access this collection.
     * @principle Prevents access to a collection.
     */
    match /predefinedFines {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}