/**
 * @fileoverview Firestore Security Rules for the handball club app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, penalties, and transactions,
 * ensuring that only the authenticated user (or an admin, if implemented) can access their data.
 * Audit logs are restricted to admin access only.  Authorization Independence is achieved for Penalties and Transactions
 * by nesting them under the user's document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/penalties/{penaltyId}: Stores penalties associated with a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions associated with a specific user.
 * - /audit_logs/{auditLogId}: Stores audit log entries.
 *
 * Key Security Decisions:
 * - Listing of all users is implicitly denied because there is no top-level `allow list: if true;` rule on `/users`.
 * - All write operations are protected by authorization checks.
 * - The rules validate that the `userId` in the path matches `request.auth.uid` for user-owned data.
 * - Audit Logs are read/write restricted to admin users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) Authenticated user with matching UID.
     * @deny (get, create, update, delete, list) Any other user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for penalties associated with a user.
     * @path /users/{userId}/penalties/{penaltyId}
     * @allow (get, create, update, delete, list) Authenticated user with matching UID.
     * @deny (get, create, update, delete, list) Any other user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/penalties/{penaltyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transactions associated with a user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, create, update, delete, list) Authenticated user with matching UID.
     * @deny (get, create, update, delete, list) Any other user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for audit logs.  Currently, all access is denied, but
     *   this can be expanded to allow admins read/write access.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
        // TODO: Implement admin role check. For now, deny all access.
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}